// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PSAPIRestaurantSystem;

namespace PSAPIRestaurantSystem.Migrations
{
    [DbContext(typeof(RestaurantContext))]
    [Migration("20200517113501_mig7")]
    partial class mig7
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("WorkEmail")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("AdminId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            EmployeeId = 1,
                            WorkEmail = "workmail@mymail.com"
                        });
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BeganWork")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EmployeeState")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndedWork")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("RegisteredByAdminId")
                        .HasColumnType("int");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("RegisteredByAdminId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            BeganWork = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(568),
                            EmployeeState = 1,
                            EndedWork = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Salary = 1000,
                            UserId = 1
                        },
                        new
                        {
                            EmployeeId = 2,
                            BeganWork = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(1313),
                            EmployeeState = 1,
                            EndedWork = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Salary = 3000,
                            UserId = 2
                        },
                        new
                        {
                            EmployeeId = 3,
                            BeganWork = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(1332),
                            EmployeeState = 1,
                            EndedWork = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Salary = 2000,
                            UserId = 9
                        },
                        new
                        {
                            EmployeeId = 4,
                            BeganWork = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(1335),
                            EmployeeState = 1,
                            EndedWork = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Salary = 1500,
                            UserId = 10
                        });
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Changed")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MenuId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            MenuId = 1,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 716, DateTimeKind.Local).AddTicks(3817),
                            Title = "Sriubos"
                        },
                        new
                        {
                            MenuId = 2,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 718, DateTimeKind.Local).AddTicks(8652),
                            Title = "Užkandžiai"
                        },
                        new
                        {
                            MenuId = 3,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 718, DateTimeKind.Local).AddTicks(8683),
                            Title = "Salotos"
                        },
                        new
                        {
                            MenuId = 4,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 718, DateTimeKind.Local).AddTicks(8686),
                            Title = "Kiauliena"
                        },
                        new
                        {
                            MenuId = 5,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 718, DateTimeKind.Local).AddTicks(8688),
                            Title = "Vistiena"
                        },
                        new
                        {
                            MenuId = 6,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 718, DateTimeKind.Local).AddTicks(8691),
                            Title = "Zuvis"
                        },
                        new
                        {
                            MenuId = 7,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 718, DateTimeKind.Local).AddTicks(8694),
                            Title = "Miltiniai patiekalai"
                        },
                        new
                        {
                            MenuId = 8,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 718, DateTimeKind.Local).AddTicks(8697),
                            Title = "Gaivieji gėrimai"
                        },
                        new
                        {
                            MenuId = 9,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 718, DateTimeKind.Local).AddTicks(8699),
                            Title = "Alus"
                        },
                        new
                        {
                            MenuId = 10,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 718, DateTimeKind.Local).AddTicks(8702),
                            Title = "Šampanas"
                        },
                        new
                        {
                            MenuId = 11,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 718, DateTimeKind.Local).AddTicks(8705),
                            Title = "Konjakas"
                        },
                        new
                        {
                            MenuId = 12,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 718, DateTimeKind.Local).AddTicks(8708),
                            Title = "Degtinė"
                        },
                        new
                        {
                            MenuId = 13,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 718, DateTimeKind.Local).AddTicks(8711),
                            Title = "Brendis"
                        },
                        new
                        {
                            MenuId = 14,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 718, DateTimeKind.Local).AddTicks(8713),
                            Title = "Vynas"
                        },
                        new
                        {
                            MenuId = 15,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 718, DateTimeKind.Local).AddTicks(8713),
                            Title = "Sidras"
                        },
                        new
                        {
                            MenuId = 16,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 718, DateTimeKind.Local).AddTicks(8716),
                            Title = "Burbonas"
                        },
                        new
                        {
                            MenuId = 17,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 718, DateTimeKind.Local).AddTicks(8719),
                            Title = "Džinas"
                        },
                        new
                        {
                            MenuId = 18,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 718, DateTimeKind.Local).AddTicks(8722),
                            Title = "Viskis"
                        });
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.MenuEntry", b =>
                {
                    b.Property<int>("MenuEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Changed")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MenuEntryName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.HasKey("MenuEntryId");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuEntries");

                    b.HasData(
                        new
                        {
                            MenuEntryId = 1,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(946),
                            MenuEntryName = "Dienos sriuba",
                            MenuId = 1,
                            Price = 1.2
                        },
                        new
                        {
                            MenuEntryId = 2,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(1390),
                            MenuEntryName = "Čili",
                            MenuId = 1,
                            Price = 3.0
                        },
                        new
                        {
                            MenuEntryId = 3,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(1412),
                            MenuEntryName = "Cibulynė",
                            MenuId = 1,
                            Price = 2.0
                        },
                        new
                        {
                            MenuEntryId = 4,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(1415),
                            MenuEntryName = "Šaltibarščiai",
                            MenuId = 1,
                            Price = 2.5
                        },
                        new
                        {
                            MenuEntryId = 5,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(1417),
                            MenuEntryName = "Šviežių daržovių salotos",
                            MenuId = 3,
                            Price = 3.0
                        },
                        new
                        {
                            MenuEntryId = 6,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(1420),
                            MenuEntryName = "Sveikuolių salotos ",
                            MenuId = 3,
                            Price = 3.5
                        },
                        new
                        {
                            MenuEntryId = 7,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(1423),
                            MenuEntryName = "Vištienos salotos",
                            MenuId = 3,
                            Price = 3.5
                        },
                        new
                        {
                            MenuEntryId = 8,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(1423),
                            MenuEntryName = "Graikiškos salotos ",
                            MenuId = 3,
                            Price = 4.5
                        },
                        new
                        {
                            MenuEntryId = 9,
                            Changed = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(1428),
                            MenuEntryName = "Burokėlių salotos su fetos sūriu ",
                            MenuId = 3,
                            Price = 4.5
                        });
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.Order", b =>
                {
                    b.Property<int>("OrderNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("ManagedByWaiterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("OrderNum");

                    b.HasIndex("ManagedByWaiterId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderNum = 1,
                            Duration = 0,
                            OrderDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 0.0,
                            State = 1
                        });
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.OrderedMeal", b =>
                {
                    b.Property<int>("OrderedMealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("InOrderOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("InOrderOrderNum")
                        .HasColumnType("int");

                    b.Property<int>("InTakeoutTakeoutOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("InTakeoutTakeoutOrderNum")
                        .HasColumnType("int");

                    b.Property<int>("MenuEntryId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderedMealId");

                    b.HasIndex("InOrderOrderNum");

                    b.HasIndex("InTakeoutTakeoutOrderNum");

                    b.HasIndex("MenuEntryId");

                    b.ToTable("OrderedMeals");
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("PersonId");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            Name = "Jonas",
                            Surname = "Petraitis"
                        },
                        new
                        {
                            PersonId = 2,
                            Name = "Mantas",
                            Surname = "Jablonoskis"
                        },
                        new
                        {
                            PersonId = 3,
                            Name = "Tomas",
                            Surname = "Tomaitis"
                        },
                        new
                        {
                            PersonId = 4,
                            Name = "Petras",
                            Surname = "Petraitis"
                        },
                        new
                        {
                            PersonId = 5,
                            Name = "Domas",
                            Surname = "Domaitis"
                        },
                        new
                        {
                            PersonId = 6,
                            Name = "Stasys",
                            Surname = "Stasaitis"
                        },
                        new
                        {
                            PersonId = 7,
                            Name = "Martyna",
                            Surname = "Martynaitė"
                        },
                        new
                        {
                            PersonId = 8,
                            Name = "Diana",
                            Surname = "Jablonoskienė"
                        },
                        new
                        {
                            PersonId = 9,
                            Name = "Tomas",
                            Surname = "Petraitis"
                        },
                        new
                        {
                            PersonId = 10,
                            Name = "Petras",
                            Surname = "Stasaitis"
                        });
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PeopleCount")
                        .HasColumnType("int");

                    b.Property<int>("ReservedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ReservedForDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("ReservationId");

                    b.HasIndex("ReservedByUserId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            ReservationId = 1,
                            PeopleCount = 2,
                            ReservedByUserId = 1,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(5707),
                            ReservedForDate = new DateTime(2020, 5, 18, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(6090),
                            State = 2
                        },
                        new
                        {
                            ReservationId = 2,
                            PeopleCount = 1,
                            ReservedByUserId = 1,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7162),
                            ReservedForDate = new DateTime(2020, 5, 19, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7178),
                            State = 3
                        },
                        new
                        {
                            ReservationId = 3,
                            Comment = "Atsivesiu suni",
                            PeopleCount = 3,
                            ReservedByUserId = 1,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7198),
                            ReservedForDate = new DateTime(2020, 5, 20, 2, 35, 0, 720, DateTimeKind.Local).AddTicks(7201),
                            State = 1
                        },
                        new
                        {
                            ReservationId = 4,
                            PeopleCount = 4,
                            ReservedByUserId = 1,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7561),
                            ReservedForDate = new DateTime(2020, 5, 20, 22, 35, 0, 720, DateTimeKind.Local).AddTicks(7572),
                            State = 3
                        },
                        new
                        {
                            ReservationId = 5,
                            PeopleCount = 2,
                            ReservedByUserId = 1,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7575),
                            ReservedForDate = new DateTime(2020, 5, 21, 18, 35, 0, 720, DateTimeKind.Local).AddTicks(7577),
                            State = 1
                        },
                        new
                        {
                            ReservationId = 6,
                            PeopleCount = 2,
                            ReservedByUserId = 1,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7580),
                            ReservedForDate = new DateTime(2020, 5, 22, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7583),
                            State = 2
                        },
                        new
                        {
                            ReservationId = 7,
                            PeopleCount = 2,
                            ReservedByUserId = 1,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7583),
                            ReservedForDate = new DateTime(2020, 5, 24, 6, 35, 0, 720, DateTimeKind.Local).AddTicks(7586),
                            State = 3
                        },
                        new
                        {
                            ReservationId = 8,
                            PeopleCount = 2,
                            ReservedByUserId = 1,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7588),
                            ReservedForDate = new DateTime(2020, 5, 25, 2, 35, 0, 720, DateTimeKind.Local).AddTicks(7591),
                            State = 1
                        },
                        new
                        {
                            ReservationId = 9,
                            PeopleCount = 2,
                            ReservedByUserId = 5,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7594),
                            ReservedForDate = new DateTime(2020, 5, 18, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7597),
                            State = 2
                        },
                        new
                        {
                            ReservationId = 10,
                            PeopleCount = 1,
                            ReservedByUserId = 5,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7599),
                            ReservedForDate = new DateTime(2020, 5, 19, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7599),
                            State = 3
                        },
                        new
                        {
                            ReservationId = 11,
                            Comment = "Atsivesiu kate",
                            PeopleCount = 3,
                            ReservedByUserId = 5,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7605),
                            ReservedForDate = new DateTime(2020, 5, 20, 2, 35, 0, 720, DateTimeKind.Local).AddTicks(7605),
                            State = 1
                        },
                        new
                        {
                            ReservationId = 12,
                            PeopleCount = 4,
                            ReservedByUserId = 5,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7622),
                            ReservedForDate = new DateTime(2020, 5, 20, 22, 35, 0, 720, DateTimeKind.Local).AddTicks(7622),
                            State = 3
                        },
                        new
                        {
                            ReservationId = 13,
                            PeopleCount = 2,
                            ReservedByUserId = 5,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7624),
                            ReservedForDate = new DateTime(2020, 5, 21, 18, 35, 0, 720, DateTimeKind.Local).AddTicks(7627),
                            State = 1
                        },
                        new
                        {
                            ReservationId = 14,
                            PeopleCount = 2,
                            ReservedByUserId = 5,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7630),
                            ReservedForDate = new DateTime(2020, 5, 22, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7633),
                            State = 2
                        },
                        new
                        {
                            ReservationId = 15,
                            PeopleCount = 2,
                            ReservedByUserId = 5,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7636),
                            ReservedForDate = new DateTime(2020, 5, 24, 6, 35, 0, 720, DateTimeKind.Local).AddTicks(7638),
                            State = 3
                        },
                        new
                        {
                            ReservationId = 16,
                            PeopleCount = 2,
                            ReservedByUserId = 5,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7641),
                            ReservedForDate = new DateTime(2020, 5, 25, 2, 35, 0, 720, DateTimeKind.Local).AddTicks(7644),
                            State = 1
                        },
                        new
                        {
                            ReservationId = 17,
                            PeopleCount = 2,
                            ReservedByUserId = 6,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7647),
                            ReservedForDate = new DateTime(2020, 5, 18, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7647),
                            State = 2
                        },
                        new
                        {
                            ReservationId = 18,
                            PeopleCount = 1,
                            ReservedByUserId = 6,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7649),
                            ReservedForDate = new DateTime(2020, 5, 19, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7652),
                            State = 3
                        },
                        new
                        {
                            ReservationId = 19,
                            Comment = "Atsivesiu suni",
                            PeopleCount = 3,
                            ReservedByUserId = 6,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7655),
                            ReservedForDate = new DateTime(2020, 5, 20, 2, 35, 0, 720, DateTimeKind.Local).AddTicks(7658),
                            State = 1
                        },
                        new
                        {
                            ReservationId = 20,
                            PeopleCount = 4,
                            ReservedByUserId = 6,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7660),
                            ReservedForDate = new DateTime(2020, 5, 20, 22, 35, 0, 720, DateTimeKind.Local).AddTicks(7663),
                            State = 3
                        },
                        new
                        {
                            ReservationId = 21,
                            PeopleCount = 2,
                            ReservedByUserId = 6,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7663),
                            ReservedForDate = new DateTime(2020, 5, 21, 18, 35, 0, 720, DateTimeKind.Local).AddTicks(7666),
                            State = 1
                        },
                        new
                        {
                            ReservationId = 22,
                            PeopleCount = 2,
                            ReservedByUserId = 6,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7669),
                            ReservedForDate = new DateTime(2020, 5, 22, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7672),
                            State = 2
                        },
                        new
                        {
                            ReservationId = 23,
                            PeopleCount = 2,
                            ReservedByUserId = 6,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7674),
                            ReservedForDate = new DateTime(2020, 5, 24, 6, 35, 0, 720, DateTimeKind.Local).AddTicks(7677),
                            State = 3
                        },
                        new
                        {
                            ReservationId = 24,
                            PeopleCount = 2,
                            ReservedByUserId = 6,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7680),
                            ReservedForDate = new DateTime(2020, 5, 25, 2, 35, 0, 720, DateTimeKind.Local).AddTicks(7680),
                            State = 1
                        },
                        new
                        {
                            ReservationId = 25,
                            PeopleCount = 2,
                            ReservedByUserId = 7,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7683),
                            ReservedForDate = new DateTime(2020, 5, 18, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7685),
                            State = 2
                        },
                        new
                        {
                            ReservationId = 26,
                            PeopleCount = 1,
                            ReservedByUserId = 7,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7688),
                            ReservedForDate = new DateTime(2020, 5, 19, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7691),
                            State = 3
                        },
                        new
                        {
                            ReservationId = 27,
                            Comment = "Atsinesiu vezliuka",
                            PeopleCount = 3,
                            ReservedByUserId = 7,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7694),
                            ReservedForDate = new DateTime(2020, 5, 20, 2, 35, 0, 720, DateTimeKind.Local).AddTicks(7694),
                            State = 1
                        },
                        new
                        {
                            ReservationId = 28,
                            PeopleCount = 4,
                            ReservedByUserId = 7,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7696),
                            ReservedForDate = new DateTime(2020, 5, 20, 22, 35, 0, 720, DateTimeKind.Local).AddTicks(7699),
                            State = 3
                        },
                        new
                        {
                            ReservationId = 29,
                            PeopleCount = 2,
                            ReservedByUserId = 7,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7702),
                            ReservedForDate = new DateTime(2020, 5, 21, 18, 35, 0, 720, DateTimeKind.Local).AddTicks(7705),
                            State = 1
                        },
                        new
                        {
                            ReservationId = 30,
                            PeopleCount = 2,
                            ReservedByUserId = 7,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7708),
                            ReservedForDate = new DateTime(2020, 5, 22, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7710),
                            State = 2
                        },
                        new
                        {
                            ReservationId = 31,
                            PeopleCount = 2,
                            ReservedByUserId = 7,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7710),
                            ReservedForDate = new DateTime(2020, 5, 24, 6, 35, 0, 720, DateTimeKind.Local).AddTicks(7713),
                            State = 3
                        },
                        new
                        {
                            ReservationId = 32,
                            PeopleCount = 2,
                            ReservedByUserId = 7,
                            ReservedDate = new DateTime(2020, 5, 17, 14, 35, 0, 720, DateTimeKind.Local).AddTicks(7716),
                            ReservedForDate = new DateTime(2020, 5, 25, 2, 35, 0, 720, DateTimeKind.Local).AddTicks(7719),
                            State = 1
                        });
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            Rating = 2,
                            ReviewDate = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(8252),
                            ReviewText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam consectetur tincidunt justo ac sollicitudin. Quisque erat mauris, malesuada in sapien quis, accumsan condimentum dui. Curabitur porttitor nibh in odio ultrices, eget efficitur arcu sollicitudin. Quisque at eros lectus. Vestibulum et bibendum arcu. Nunc a nulla consequat leo congue egestas eget in enim. Aliquam dictum ultricies arcu, finibus accumsan nisi imperdiet sed. Curabitur ac nibh tellus. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Cras porta cursus odio eget volutpat. Praesent tristique sollicitudin lacus, vel faucibus nisl vestibulum nec. Vestibulum iaculis nulla eu risus mattis, quis finibus risus bibendum.",
                            UserId = 1
                        },
                        new
                        {
                            ReviewId = 2,
                            Rating = 5,
                            ReviewDate = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(9019),
                            ReviewText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam consectetur tincidunt justo ac sollicitudin. Quisque erat mauris, malesuada in sapien quis, accumsan condimentum dui. Curabitur porttitor nibh in odio ultrices, eget efficitur arcu sollicitudin. Quisque at eros lectus. Vestibulum et bibendum arcu. Nunc a nulla consequat leo congue egestas eget in enim. Aliquam dictum ultricies arcu, finibus accumsan nisi imperdiet sed. Curabitur ac nibh tellus. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Cras porta cursus odio eget volutpat. Praesent tristique sollicitudin lacus, vel faucibus nisl vestibulum nec. Vestibulum iaculis nulla eu risus mattis, quis finibus risus bibendum.",
                            UserId = 2
                        },
                        new
                        {
                            ReviewId = 3,
                            Rating = 4,
                            ReviewDate = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(9041),
                            ReviewText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam consectetur tincidunt justo ac sollicitudin. Quisque erat mauris, malesuada in sapien quis, accumsan condimentum dui. Curabitur porttitor nibh in odio ultrices, eget efficitur arcu sollicitudin. Quisque at eros lectus. Vestibulum et bibendum arcu. Nunc a nulla consequat leo congue egestas eget in enim. Aliquam dictum ultricies arcu, finibus accumsan nisi imperdiet sed. Curabitur ac nibh tellus. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Cras porta cursus odio eget volutpat. Praesent tristique sollicitudin lacus, vel faucibus nisl vestibulum nec. Vestibulum iaculis nulla eu risus mattis, quis finibus risus bibendum.",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.Table", b =>
                {
                    b.Property<int>("TableNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("SeatCount")
                        .HasColumnType("int");

                    b.HasKey("TableNum");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            TableNum = 1,
                            SeatCount = 4
                        },
                        new
                        {
                            TableNum = 2,
                            SeatCount = 2
                        },
                        new
                        {
                            TableNum = 3,
                            SeatCount = 4
                        },
                        new
                        {
                            TableNum = 4,
                            SeatCount = 5
                        },
                        new
                        {
                            TableNum = 5,
                            SeatCount = 12
                        },
                        new
                        {
                            TableNum = 6,
                            SeatCount = 12
                        },
                        new
                        {
                            TableNum = 7,
                            SeatCount = 4
                        },
                        new
                        {
                            TableNum = 8,
                            SeatCount = 4
                        },
                        new
                        {
                            TableNum = 9,
                            SeatCount = 2
                        },
                        new
                        {
                            TableNum = 10,
                            SeatCount = 2
                        },
                        new
                        {
                            TableNum = 11,
                            SeatCount = 6
                        },
                        new
                        {
                            TableNum = 12,
                            SeatCount = 6
                        });
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.TableOccupancy", b =>
                {
                    b.Property<int>("TableOccupancyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.HasKey("TableOccupancyId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("TableId");

                    b.ToTable("TableOccupancies");
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.TakeoutOrder", b =>
                {
                    b.Property<int>("TakeoutOrderNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ConfirmationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ManagedByWaiterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OrderedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderedForDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("TakeoutOrderNum");

                    b.HasIndex("ManagedByWaiterId");

                    b.HasIndex("OrderedByUserId");

                    b.ToTable("TakeoutOrders");
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LoyalityPoints")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Confirmed = true,
                            Email = "jonas@emai.com",
                            LastLoginDate = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(5147),
                            LoyalityPoints = 1,
                            Password = "slaptozodis",
                            PersonId = 1,
                            RegistrationDate = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(4753)
                        },
                        new
                        {
                            UserId = 2,
                            Confirmed = true,
                            Email = "mantas@email.com",
                            LastLoginDate = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(6565),
                            LoyalityPoints = 10,
                            Password = "slaptozodis",
                            PersonId = 2,
                            RegistrationDate = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(6537)
                        },
                        new
                        {
                            UserId = 3,
                            Confirmed = true,
                            Email = "tomas@email.com",
                            LastLoginDate = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(6601),
                            LoyalityPoints = 20,
                            Password = "slaptozodis",
                            PersonId = 3,
                            RegistrationDate = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(6598)
                        },
                        new
                        {
                            UserId = 4,
                            Confirmed = true,
                            Email = "petraitis@gmail.com",
                            LastLoginDate = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(6607),
                            LoyalityPoints = 5,
                            Password = "slaptozodis",
                            PersonId = 4,
                            RegistrationDate = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(6604)
                        },
                        new
                        {
                            UserId = 5,
                            Confirmed = true,
                            Email = "domas@email.com",
                            LastLoginDate = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(6629),
                            LoyalityPoints = 50,
                            Password = "slaptozodis",
                            PersonId = 5,
                            RegistrationDate = new DateTime(2020, 5, 15, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(6609)
                        },
                        new
                        {
                            UserId = 6,
                            Confirmed = true,
                            Email = "stasys@email.com",
                            LastLoginDate = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(6634),
                            LoyalityPoints = 60,
                            Password = "slaptozodis",
                            PersonId = 6,
                            RegistrationDate = new DateTime(2020, 5, 14, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(6632)
                        },
                        new
                        {
                            UserId = 7,
                            Confirmed = true,
                            Email = "martyna@email.com",
                            LastLoginDate = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(6679),
                            LoyalityPoints = 70,
                            Password = "slaptozodis",
                            PersonId = 7,
                            RegistrationDate = new DateTime(2020, 5, 13, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(6676)
                        },
                        new
                        {
                            UserId = 8,
                            Confirmed = true,
                            Email = "diana@email.com",
                            LastLoginDate = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(6684),
                            LoyalityPoints = 80,
                            Password = "slaptozodis",
                            PersonId = 8,
                            RegistrationDate = new DateTime(2020, 5, 12, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(6681)
                        },
                        new
                        {
                            UserId = 9,
                            Confirmed = true,
                            Email = "tomas@gmail.com",
                            LastLoginDate = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(6690),
                            LoyalityPoints = 3,
                            Password = "slaptozodis",
                            PersonId = 9,
                            RegistrationDate = new DateTime(2020, 5, 11, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(6687)
                        },
                        new
                        {
                            UserId = 10,
                            Confirmed = true,
                            Email = "petras@gmail.com",
                            LastLoginDate = new DateTime(2020, 5, 17, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(6695),
                            LoyalityPoints = 4,
                            Password = "slaptozodis",
                            PersonId = 10,
                            RegistrationDate = new DateTime(2020, 5, 16, 14, 35, 0, 719, DateTimeKind.Local).AddTicks(6693)
                        });
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.Waiter", b =>
                {
                    b.Property<int>("WaiterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<double>("Tips")
                        .HasColumnType("double");

                    b.HasKey("WaiterId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("Waiters");

                    b.HasData(
                        new
                        {
                            WaiterId = 1,
                            EmployeeId = 2,
                            Tips = 100.0
                        },
                        new
                        {
                            WaiterId = 2,
                            EmployeeId = 3,
                            Tips = 200.0
                        },
                        new
                        {
                            WaiterId = 3,
                            EmployeeId = 4,
                            Tips = 250.0
                        });
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.Admin", b =>
                {
                    b.HasOne("PSAPIRestaurantSystem.Models.Employee", "Employee")
                        .WithOne("Admin")
                        .HasForeignKey("PSAPIRestaurantSystem.Models.Admin", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.Employee", b =>
                {
                    b.HasOne("PSAPIRestaurantSystem.Models.Admin", "RegisteredBy")
                        .WithMany("RegisteredEmployees")
                        .HasForeignKey("RegisteredByAdminId");

                    b.HasOne("PSAPIRestaurantSystem.Models.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("PSAPIRestaurantSystem.Models.Employee", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.MenuEntry", b =>
                {
                    b.HasOne("PSAPIRestaurantSystem.Models.Menu", "Menu")
                        .WithMany("MenuEntries")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.Order", b =>
                {
                    b.HasOne("PSAPIRestaurantSystem.Models.Waiter", "ManagedBy")
                        .WithMany("Orders")
                        .HasForeignKey("ManagedByWaiterId");
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.OrderedMeal", b =>
                {
                    b.HasOne("PSAPIRestaurantSystem.Models.Order", "InOrder")
                        .WithMany("OrderedMeals")
                        .HasForeignKey("InOrderOrderNum");

                    b.HasOne("PSAPIRestaurantSystem.Models.TakeoutOrder", "InTakeout")
                        .WithMany("OrderedMeals")
                        .HasForeignKey("InTakeoutTakeoutOrderNum");

                    b.HasOne("PSAPIRestaurantSystem.Models.MenuEntry", "MenuEntry")
                        .WithMany("OrderedMeals")
                        .HasForeignKey("MenuEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.Reservation", b =>
                {
                    b.HasOne("PSAPIRestaurantSystem.Models.User", "ReservedBy")
                        .WithMany("Reservations")
                        .HasForeignKey("ReservedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.Review", b =>
                {
                    b.HasOne("PSAPIRestaurantSystem.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.TableOccupancy", b =>
                {
                    b.HasOne("PSAPIRestaurantSystem.Models.Order", "Order")
                        .WithMany("TableOccupancies")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSAPIRestaurantSystem.Models.Reservation", "Reservation")
                        .WithMany("TableOccupancies")
                        .HasForeignKey("ReservationId");

                    b.HasOne("PSAPIRestaurantSystem.Models.Table", "Table")
                        .WithMany("TableOccupancies")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.TakeoutOrder", b =>
                {
                    b.HasOne("PSAPIRestaurantSystem.Models.Waiter", "ManagedBy")
                        .WithMany("TakeoutOrders")
                        .HasForeignKey("ManagedByWaiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSAPIRestaurantSystem.Models.User", "OrderedBy")
                        .WithMany("TakeoutOrders")
                        .HasForeignKey("OrderedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.User", b =>
                {
                    b.HasOne("PSAPIRestaurantSystem.Models.Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("PSAPIRestaurantSystem.Models.User", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PSAPIRestaurantSystem.Models.Waiter", b =>
                {
                    b.HasOne("PSAPIRestaurantSystem.Models.Employee", "Employee")
                        .WithOne("Waiter")
                        .HasForeignKey("PSAPIRestaurantSystem.Models.Waiter", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
